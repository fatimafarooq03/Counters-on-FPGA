Entity Declaration:

entity DecimalCounter is
    Port ( MCLK : in  STD_LOGIC; --standard clock input
           reset : in  STD_LOGIC; -- reset button input
           AN : out  STD_LOGIC_VECTOR(3 downto 0); -- cammon anode for controlling 7 segment display
           dec : out  STD_LOGIC_VECTOR(6 downto 0)); -- output for 7 segment display
end DecimalCounter;





Architecture:

architecture Behavioral of DecimalCounter is

signal count : integer :=1; -- counts the number of cycles to divide the frequency for the 1Hz clock
signal countAN : integer :=1; -- counts the number of cycles to divide the frequency for the frequency changing for the anode switch
signal sel : std_logic_vector(3 downto 0); -- signal to know which 7 segment to turn on
signal seconds: integer :=0; -- keeps track of the seconds
signal digit: integer :=0; -- stores the digit to display for a specific 7 segment
signal clk : std_logic :='0'; -- clock signal of frequency 1Hz

begin

process(MCLK)

begin

if(MCLK'event and MCLK='1') then

countAN <= countAN+1; -- increments countAN to count the number of cycles to generate a signal of frequency 50000 Hz so that the 2 7 segments can be alternated 
count <= count+1;

if (countAN = 25000) then -- if half cycle show the first segment display
sel <= "1011"; 
end if;

if (countAN = 50000) then -- if half cycle show the second segment display
sel <= "0111"; 
countAN <= 1; -- resets the countAN to 1 so the process continues in a loop
end if;

if(count = 25000000) then
clk <= not clk;

count <=1;

end if;
end if;

end process;

process (clk)

begin 

if (rising_edge(clk)) then
seconds <= seconds + 1; 
end if; 
if (seconds = 16) then
seconds <= 0; 
end if;

if(reset = '1') then 
seconds <= 0;
end if;

end process;

-- multiplexing the sel signal to turn on specifc 7 segment according to the value of sel because the 7 segment will alternate between the two but at a frequency not visible to the human eye
with (sel) select

AN <= "0111" when "0111",
      "1011" when "1011",
		"1111" when others; 

process(seconds,sel)

begin

if (sel = "1011" and seconds <= 9) then -- asssigns 0 to digit if seconds is less than 9 as seconds will be in the range 0-9
digit <= 0;

end if; 

if (sel = "1011" and seconds > 9) then -- asssigns 1 to digit if seconds is greater than 9 as seconds will be in the range 10-15
digit <= 1;

end if; 

if (sel = "0111" and seconds > 9) then -- asssigns 10-seconds to digit if seconds is greater than 9 as seconds will be in the range 10-15
digit <= seconds-10;

end if; 

if (sel = "0111" and seconds <= 9) then -- asssigns seconds to digit if seconds is less than 9 as it will be in the range 0-9
digit <= seconds; 

end if; 

-- output on 7 segment display according to the value of the digit
case digit is 
			when 0=>dec<="0000001";-- shows 0
			when 1=>dec<="1001111";-- shows 1
			when 2=>dec<="0010010";-- shows 2
			when 3=>dec<="0000110";-- shows 3
			when 4=>dec<="1001100";-- shows 4
			when 5=>dec<="0100100";-- shows 5
			when 6=>dec<="0100000";-- shows 6
			when 7=>dec<="0001111";-- shows 7
			when 8=>dec<="0000000";-- shows 8 
			when 9=>dec<="0000100";-- shows 9
			when others=>null;
		end case;

end process; 

end Behavioral;





Constraint File:

NET "MCLK" LOC = "B8";

NET "reset" LOC = "A7";

NET "AN(0)" LOC = "K14";
NET "AN(1)" LOC = "M13";
NET "AN(2)" LOC = "J12";
NET "AN(3)" LOC = "F12";

NET "dec(6)" LOC = "L14";
NET "dec(5)" LOC = "H12";
NET "dec(4)" LOC = "N14";
NET "dec(3)" LOC = "N11";
NET "dec(2)" LOC = "P12";
NET "dec(1)" LOC = "L13";
NET "dec(0)" LOC = "M12";